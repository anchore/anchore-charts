NAME: foo
LAST DEPLOYED: Thu Jun 18 17:46:38 2020
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
anchoreAnalyzer:
  affinity: {}
  annotations: {}
  concurrentTasksPerWorker: 1
  configFile:
    retrieve_files:
      file_list:
      - /etc/passwd
    secret_search:
      match_params:
      - MAXFILESIZE=10000
      - STOREONMATCH=n
      regexp_match:
      - AWS_ACCESS_KEY=(?i).*aws_access_key_id( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9]).*
      - AWS_SECRET_KEY=(?i).*aws_secret_access_key( *=+ *).*(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=]).*
      - PRIV_KEY=(?i)-+BEGIN(.*)PRIVATE KEY-+
      - 'DOCKER_AUTH=(?i).*"auth": *".+"'
      - API_KEY=(?i).*api(-|_)key( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20,60}(?![A-Z0-9]).*
  containerPort: 8084
  cycleTimers:
    image_analyzer: 5
  extraEnv: []
  labels: {}
  layerCacheMaxGigabytes: 0
  nodeSelector: {}
  replicaCount: 1
  tolerations: []
anchoreApi:
  affinity: {}
  annotations: {}
  extraEnv: []
  labels: {}
  nodeSelector: {}
  replicaCount: 1
  service:
    annotations: {}
    label: {}
    port: 8228
    type: ClusterIP
  tolerations: []
anchoreCatalog:
  affinity: {}
  annotations: {}
  archive:
    compression:
      enabled: true
      min_size_kbytes: 100
    storage_driver:
      config: {}
      name: db
  cycleTimers:
    analyzer_queue: 1
    image_watcher: 3600
    notifications: 30
    policy_eval: 3600
    repo_watcher: 60
    service_watcher: 15
    vulnerability_scan: 14400
  events:
    notification:
      enabled: false
      level:
      - error
  extraEnv: []
  labels: {}
  nodeSelector: {}
  replicaCount: 1
  service:
    annotations: {}
    labels: {}
    port: 8082
    type: ClusterIP
  tolerations: []
anchoreEnterpriseGlobal:
  enabled: false
anchoreGlobal:
  allowECRUseIAMRole: false
  certStoreSecretName: null
  cleanupImages: true
  dbConfig:
    connectionPoolMaxOverflow: 100
    connectionPoolSize: 30
    ssl: false
    sslMode: verify-full
    sslRootCertName: null
    timeout: 120
  defaultAdminEmail: example@email.com
  defaultAdminPassword: foobar
  enableMetrics: false
  existingSecret: null
  extraEnv: []
  hashedPasswords: false
  image: docker.io/anchore/anchore-engine:v0.7.2
  imageAnalyzeTimeoutSeconds: 36000
  imagePullPolicy: IfNotPresent
  imagePullSecretName: null
  internalServicesSsl:
    certSecretCertName: null
    certSecretKeyName: null
    enabled: false
    verifyCerts: false
  labels: {}
  logLevel: INFO
  metricsAuthDisabled: false
  oauthEnabled: false
  oauthTokenExpirationSeconds: 3600
  openShiftDeployment: false
  saml:
    privateKeyName: null
    publicKeyName: null
    secret: null
  scratchVolume:
    details:
      emptyDir: {}
    mountPath: /analysis_scratch
  serviceDir: /anchore_service
  webhooks:
    general: {}
    ssl_verify: true
    webhook_pass: null
    webhook_user: null
  webhooksEnabled: false
anchorePolicyEngine:
  affinity: {}
  annotations: {}
  cycleTimers:
    feed_sync: 14400
    feed_sync_checker: 3600
  extraEnv: []
  labels: {}
  nodeSelector: {}
  replicaCount: 1
  service:
    annotations: {}
    labels: {}
    port: 8087
    type: ClusterIP
  tolerations: []
anchoreSimpleQueue:
  affinity: {}
  annotations: {}
  extraEnv: []
  labels: {}
  nodeSelector: {}
  replicaCount: 1
  service:
    annotations: {}
    labels: {}
    port: 8083
    type: ClusterIP
  tolerations: []
cloudsql:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    repository: gcr.io/cloudsql-docker/gce-proxy
    tag: 1.12
  instance: ""
ingress:
  annotations:
    kubernetes.io/ingress.class: nginx
  apiPath: /v1/
  enabled: true
  labels: {}
  tls: []
  uiPath: /
postgresql:
  affinity: {}
  deploymentAnnotations: {}
  externalEndpoint: null
  extraEnv: {}
  global: {}
  image: postgres
  imageTag: 9.6.2
  metrics:
    enabled: false
    image: wrouesnel/postgres_exporter
    imagePullPolicy: IfNotPresent
    imageTag: v0.4.6
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    enabled: true
    mountPath: /var/lib/postgresql/data/pgdata
    resourcePolicy: nil
    size: 20Gi
    subPath: postgresql-db
  podAnnotations: {}
  postgresDatabase: anchore
  postgresPassword: anchore-postgres,123
  postgresUser: anchoreengine
  probes:
    liveness:
      failureThreshold: 6
      initialDelay: 60
      timeoutSeconds: 5
    readiness:
      initialDelay: 5
      periodSeconds: 5
      timeoutSeconds: 3
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
  service:
    externalIPs: []
    port: 5432
    type: ClusterIP
  tolerations: []
  usePasswordFile: false

HOOKS:
---
# Source: anchore-engine/templates/engine_upgrade_job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "foo-engine-upgrade"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "foo"
    app.kubernetes.io/version: 0.7.2
    helm.sh/chart: "anchore-engine-1.6.8"
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "-5"
spec:
  template:
    metadata:
      name: "foo-engine-upgrade"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "foo"
        helm.sh/chart: "anchore-engine-1.6.8"
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      restartPolicy: Never
      containers:
      - name: "foo-engine-upgrade"
        image: docker.io/anchore/anchore-engine:v0.7.2
        imagePullPolicy: IfNotPresent
        args: ["/bin/bash", "-c", "anchore-manager db --db-connect postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME} upgrade --dontask"]
        envFrom:
        - secretRef:
            name: foo-anchore-engine
        - configMapRef:
            name: foo-anchore-engine-env
        env:
MANIFEST:
---
# Source: anchore-engine/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: foo-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: foo
    heritage: Helm
type: Opaque
data:
  
  postgres-password:  "YW5jaG9yZS1wb3N0Z3JlcywxMjM="
---
# Source: anchore-engine/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: foo-anchore-engine
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
type: Opaque
stringData:
  ANCHORE_ADMIN_PASSWORD: "foobar"
  ANCHORE_DB_PASSWORD: "anchore-postgres,123"
---
# Source: anchore-engine/charts/postgresql/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: foo-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: foo
    heritage: Helm
data:
---
# Source: anchore-engine/templates/analyzer_deployment.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: foo-anchore-engine-analyzer
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: analyzer
data:
  analyzer_config.yaml: |
    # Anchore Global Configuration
    service_dir: /anchore_service
    tmp_dir: /analysis_scratch
    log_level: INFO
    image_analyze_timeout_seconds: 36000
    cleanup_images: true
    allow_awsecr_iam_auto: false
    host_id: "${ANCHORE_POD_NAME}"
    internal_ssl_verify: false
    auto_restart_services: false
  
    global_client_connect_timeout: 0
    global_client_read_timeout: 0
  
    metrics:
      enabled: false
      auth_disabled: false
    
    # Configure what feeds to sync.
    # The sync will hit http://ancho.re/feeds, if any outbound firewall config needs to be set in your environment.
    feeds:
      sync_enabled: true
      selective_sync:
        # If enabled only sync specific feeds instead of all that are found.
        enabled: true
        feeds:
          github: true
          # Vulnerabilities feed is the feed for distro cve sources (redhat, debian, ubuntu, oracle, alpine....)
          vulnerabilities: true
          # NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and released by distros as rpms, debs, etc
          nvdv2: true
          # Warning: enabling the package sync causes the service to require much
          #   more memory to do process the significant data volume. We recommend at least 4GB available for the container
          packages: false
          vulndb: false
          microsoft: false
          # Sync github data if available for GHSA matches
          github: true
      client_url: "https://ancho.re/v1/account/users"
      token_url: "https://ancho.re/oauth/token"
      anonymous_user_username: anon@ancho.re
      anonymous_user_password: pbiU2RYZ2XrmYQ
      connection_timeout_seconds: 3
      read_timeout_seconds: 180
    default_admin_password: ${ANCHORE_ADMIN_PASSWORD}
    default_admin_email: example@email.com
  
    # Locations for keys used for signing and encryption. Only one of 'secret' or 'public_key_path'/'private_key_path' needs to be set. If all are set then the keys take precedence over the secret value
    # Secret is for a shared secret and if set, all components in anchore should have the exact same value in their configs.
    keys:
      secret: 
    # Configuring supported user authentication and credential management
    user_authentication:
      oauth:
        enabled: false
        default_token_expiration_seconds: 3600
      # Set this to True to enable storing user passwords only as secure hashes in the db. This can dramatically increase CPU usage if you
      # don't also use oauth and tokens for internal communications (which requires keys/secret to be configured as well)
      # WARNING: you should not change this after a system has been initialized as it may cause a mismatch in existing passwords
      hashed_passwords: false
    credentials:
      database:
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}"
        db_connect_args:
          timeout: 120
          ssl: false
        db_pool_size: 30
        db_pool_max_overflow: 100
    # End Anchore Global Configuration
    # Anchore Analyzer config
    retrieve_files:
      file_list:
      - /etc/passwd
    secret_search:
      match_params:
      - MAXFILESIZE=10000
      - STOREONMATCH=n
      regexp_match:
      - AWS_ACCESS_KEY=(?i).*aws_access_key_id( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9]).*
      - AWS_SECRET_KEY=(?i).*aws_secret_access_key( *=+ *).*(?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=]).*
      - PRIV_KEY=(?i)-+BEGIN(.*)PRIVATE KEY-+
      - 'DOCKER_AUTH=(?i).*"auth": *".+"'
      - API_KEY=(?i).*api(-|_)key( *=+ *).*(?<![A-Z0-9])[A-Z0-9]{20,60}(?![A-Z0-9]).*
    services:
      analyzer:
        enabled: true
        require_auth: true
        endpoint_hostname: foo-anchore-engine-analyzer
        listen: 0.0.0.0
        port: 8084
        cycle_timer_seconds: 1
        cycle_timers:
          image_analyzer: 5
        max_threads: 1
        analyzer_driver: 'nodocker'
        layer_cache_enable: false
        layer_cache_max_gigabytes: 0
    # End Anchore Analyzer config
---
# Source: anchore-engine/templates/api_deployment.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: foo-anchore-engine-api
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
data:
  api_config.yaml: |
    # Anchore Global Configuration
    service_dir: /anchore_service
    tmp_dir: /analysis_scratch
    log_level: INFO
    image_analyze_timeout_seconds: 36000
    cleanup_images: true
    allow_awsecr_iam_auto: false
    host_id: "${ANCHORE_POD_NAME}"
    internal_ssl_verify: false
    auto_restart_services: false
  
    global_client_connect_timeout: 0
    global_client_read_timeout: 0
  
    metrics:
      enabled: false
      auth_disabled: false
    
    # Configure what feeds to sync.
    # The sync will hit http://ancho.re/feeds, if any outbound firewall config needs to be set in your environment.
    feeds:
      sync_enabled: true
      selective_sync:
        # If enabled only sync specific feeds instead of all that are found.
        enabled: true
        feeds:
          github: true
          # Vulnerabilities feed is the feed for distro cve sources (redhat, debian, ubuntu, oracle, alpine....)
          vulnerabilities: true
          # NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and released by distros as rpms, debs, etc
          nvdv2: true
          # Warning: enabling the package sync causes the service to require much
          #   more memory to do process the significant data volume. We recommend at least 4GB available for the container
          packages: false
          vulndb: false
          microsoft: false
          # Sync github data if available for GHSA matches
          github: true
      client_url: "https://ancho.re/v1/account/users"
      token_url: "https://ancho.re/oauth/token"
      anonymous_user_username: anon@ancho.re
      anonymous_user_password: pbiU2RYZ2XrmYQ
      connection_timeout_seconds: 3
      read_timeout_seconds: 180
    default_admin_password: ${ANCHORE_ADMIN_PASSWORD}
    default_admin_email: example@email.com
  
    # Locations for keys used for signing and encryption. Only one of 'secret' or 'public_key_path'/'private_key_path' needs to be set. If all are set then the keys take precedence over the secret value
    # Secret is for a shared secret and if set, all components in anchore should have the exact same value in their configs.
    keys:
      secret: 
    # Configuring supported user authentication and credential management
    user_authentication:
      oauth:
        enabled: false
        default_token_expiration_seconds: 3600
      # Set this to True to enable storing user passwords only as secure hashes in the db. This can dramatically increase CPU usage if you
      # don't also use oauth and tokens for internal communications (which requires keys/secret to be configured as well)
      # WARNING: you should not change this after a system has been initialized as it may cause a mismatch in existing passwords
      hashed_passwords: false
    credentials:
      database:
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}"
        db_connect_args:
          timeout: 120
          ssl: false
        db_pool_size: 30
        db_pool_max_overflow: 100
    # End Anchore Global Configuration
    # Anchore External API config
    services:
      apiext:
        enabled: true
        require_auth: true
        endpoint_hostname: foo-anchore-engine-api
        listen: 0.0.0.0
        port: 8228
    # End Anchore External API config
---
# Source: anchore-engine/templates/catalog_deployment.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: foo-anchore-engine-catalog
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
data:
  catalog_config.yaml: |
    # Anchore Global Configuration
    service_dir: /anchore_service
    tmp_dir: /analysis_scratch
    log_level: INFO
    image_analyze_timeout_seconds: 36000
    cleanup_images: true
    allow_awsecr_iam_auto: false
    host_id: "${ANCHORE_POD_NAME}"
    internal_ssl_verify: false
    auto_restart_services: false
  
    global_client_connect_timeout: 0
    global_client_read_timeout: 0
  
    metrics:
      enabled: false
      auth_disabled: false
    
    # Configure what feeds to sync.
    # The sync will hit http://ancho.re/feeds, if any outbound firewall config needs to be set in your environment.
    feeds:
      sync_enabled: true
      selective_sync:
        # If enabled only sync specific feeds instead of all that are found.
        enabled: true
        feeds:
          github: true
          # Vulnerabilities feed is the feed for distro cve sources (redhat, debian, ubuntu, oracle, alpine....)
          vulnerabilities: true
          # NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and released by distros as rpms, debs, etc
          nvdv2: true
          # Warning: enabling the package sync causes the service to require much
          #   more memory to do process the significant data volume. We recommend at least 4GB available for the container
          packages: false
          vulndb: false
          microsoft: false
          # Sync github data if available for GHSA matches
          github: true
      client_url: "https://ancho.re/v1/account/users"
      token_url: "https://ancho.re/oauth/token"
      anonymous_user_username: anon@ancho.re
      anonymous_user_password: pbiU2RYZ2XrmYQ
      connection_timeout_seconds: 3
      read_timeout_seconds: 180
    default_admin_password: ${ANCHORE_ADMIN_PASSWORD}
    default_admin_email: example@email.com
  
    # Locations for keys used for signing and encryption. Only one of 'secret' or 'public_key_path'/'private_key_path' needs to be set. If all are set then the keys take precedence over the secret value
    # Secret is for a shared secret and if set, all components in anchore should have the exact same value in their configs.
    keys:
      secret: 
    # Configuring supported user authentication and credential management
    user_authentication:
      oauth:
        enabled: false
        default_token_expiration_seconds: 3600
      # Set this to True to enable storing user passwords only as secure hashes in the db. This can dramatically increase CPU usage if you
      # don't also use oauth and tokens for internal communications (which requires keys/secret to be configured as well)
      # WARNING: you should not change this after a system has been initialized as it may cause a mismatch in existing passwords
      hashed_passwords: false
    credentials:
      database:
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}"
        db_connect_args:
          timeout: 120
          ssl: false
        db_pool_size: 30
        db_pool_max_overflow: 100
    # End Anchore Global Configuration
    # Anchore Catalog config
    services:
      catalog:
        enabled: true
        require_auth: true
        endpoint_hostname: foo-anchore-engine-catalog
        listen: 0.0.0.0
        port: 8082
        cycle_timer_seconds: 1
        cycle_timers:
          # Interval to check for an update to a tag
          image_watcher: 3600
          # Interval to run a policy evaluation on images with the policy_eval subscription activated.
          policy_eval: 3600
          # Interval to run a vulnerability scan on images with the vuln_update subscription activated.
          vulnerability_scan: 14400
          # Interval at which the catalog looks for new work to put on the image analysis queue.
          analyzer_queue: 1
          # Interval notifications will be processed for state changes
          notifications: 30
          # Intervals service state updates are polled for the system status
          service_watcher: 15
          # Interval between checks to repo for new tags
          repo_watcher: 60
        event_log:
          notification:
            enabled: false
            level:
            - error
        archive:
          compression:
            enabled: true
            min_size_kbytes: 100
          storage_driver:
            config: {}
            name: db
    # End Anchore Catalog config
---
# Source: anchore-engine/templates/engine_configmap_env.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: foo-anchore-engine-env
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
data:
  ANCHORE_DB_NAME: "anchore"
  ANCHORE_DB_USER: "anchoreengine"
  ANCHORE_DB_HOST: "foo-postgresql:5432"
---
# Source: anchore-engine/templates/simplequeue_deployment.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "simplequeue-config"
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
data:
  simplequeue_config.yaml: |
    # Anchore Global Configuration
    service_dir: /anchore_service
    tmp_dir: /analysis_scratch
    log_level: INFO
    image_analyze_timeout_seconds: 36000
    cleanup_images: true
    allow_awsecr_iam_auto: false
    host_id: "${ANCHORE_POD_NAME}"
    internal_ssl_verify: false
    auto_restart_services: false
  
    global_client_connect_timeout: 0
    global_client_read_timeout: 0
  
    metrics:
      enabled: false
      auth_disabled: false
    
    # Configure what feeds to sync.
    # The sync will hit http://ancho.re/feeds, if any outbound firewall config needs to be set in your environment.
    feeds:
      sync_enabled: true
      selective_sync:
        # If enabled only sync specific feeds instead of all that are found.
        enabled: true
        feeds:
          github: true
          # Vulnerabilities feed is the feed for distro cve sources (redhat, debian, ubuntu, oracle, alpine....)
          vulnerabilities: true
          # NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and released by distros as rpms, debs, etc
          nvdv2: true
          # Warning: enabling the package sync causes the service to require much
          #   more memory to do process the significant data volume. We recommend at least 4GB available for the container
          packages: false
          vulndb: false
          microsoft: false
          # Sync github data if available for GHSA matches
          github: true
      client_url: "https://ancho.re/v1/account/users"
      token_url: "https://ancho.re/oauth/token"
      anonymous_user_username: anon@ancho.re
      anonymous_user_password: pbiU2RYZ2XrmYQ
      connection_timeout_seconds: 3
      read_timeout_seconds: 180
    default_admin_password: ${ANCHORE_ADMIN_PASSWORD}
    default_admin_email: example@email.com
  
    # Locations for keys used for signing and encryption. Only one of 'secret' or 'public_key_path'/'private_key_path' needs to be set. If all are set then the keys take precedence over the secret value
    # Secret is for a shared secret and if set, all components in anchore should have the exact same value in their configs.
    keys:
      secret: 
    # Configuring supported user authentication and credential management
    user_authentication:
      oauth:
        enabled: false
        default_token_expiration_seconds: 3600
      # Set this to True to enable storing user passwords only as secure hashes in the db. This can dramatically increase CPU usage if you
      # don't also use oauth and tokens for internal communications (which requires keys/secret to be configured as well)
      # WARNING: you should not change this after a system has been initialized as it may cause a mismatch in existing passwords
      hashed_passwords: false
    credentials:
      database:
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}"
        db_connect_args:
          timeout: 120
          ssl: false
        db_pool_size: 30
        db_pool_max_overflow: 100
    # End Anchore Global Configuration
    # Anchore SimpleQueue config
    services:
      simplequeue:
        enabled: true
        require_auth: true
        endpoint_hostname: foo-anchore-engine-simplequeue
        listen: 0.0.0.0
        port: 8083
    # End Anchore SimpleQueue config
---
# Source: anchore-engine/charts/postgresql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: foo-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: foo
    heritage: Helm
  annotations:
    "helm.sh/resource-policy": nil
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "20Gi"
---
# Source: anchore-engine/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: foo-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: foo
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: foo
---
# Source: anchore-engine/templates/api_deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: foo-anchore-engine-api
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: api
spec:
  type: ClusterIP
  ports:
    - name: anchore-external-api
      port: 8228
      targetPort: 8228
      protocol: TCP
  selector:
    app: foo-anchore-engine
    component: api
---
# Source: anchore-engine/templates/catalog_deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: foo-anchore-engine-catalog
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: catalog
spec:
  type: ClusterIP
  ports:
    - name: anchore-catalog-api
      port: 8082
      targetPort: 8082
      protocol: TCP
  selector:
    app: foo-anchore-engine
    component: catalog
---
# Source: anchore-engine/templates/policy_engine_deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: foo-anchore-engine-policy
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: policy
spec:
  type: ClusterIP
  ports:
    - name: anchore-policy-api
      port: 8087
      targetPort: 8087
      protocol: TCP
  selector:
    app: foo-anchore-engine
    component: policy
---
# Source: anchore-engine/templates/simplequeue_deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: foo-anchore-engine-simplequeue
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: simplequeue
spec:
  type: ClusterIP
  ports:
    - name: anchore-simplequeue-api
      port: 8083
      targetPort: 8083
      protocol: TCP
  selector:
    app: foo-anchore-engine
    component: simplequeue
---
# Source: anchore-engine/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: foo-postgresql
  labels:
    app: postgresql
    chart: postgresql-1.0.0
    release: foo
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: postgresql
      release: foo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgresql
        release: foo
    spec:
      containers:
      - name: foo-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "anchoreengine"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "anchoreengine"
        - name: POSTGRES_DB
          value: "anchore"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: foo-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: foo-postgresql
---
# Source: anchore-engine/templates/analyzer_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: foo-anchore-engine-analyzer
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: analyzer
spec:
  selector:
    matchLabels:
      app: foo-anchore-engine
      component: analyzer
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app: foo-anchore-engine
        component: analyzer
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: anchore-engine-analyzer
        image: docker.io/anchore/anchore-engine:v0.7.2
        imagePullPolicy: IfNotPresent
        args: ["anchore-manager", "service", "start", "--no-auto-upgrade", "analyzer"]
        envFrom:
        - secretRef:
            name: foo-anchore-engine
        - configMapRef:
            name: foo-anchore-engine-env
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: analyzer-api
          containerPort: 8084
        volumeMounts:
        - name: analyzer-config-volume
          mountPath: /anchore_service/analyzer_config.yaml
          subPath: analyzer_config.yaml
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        - name: analyzer-scratch
          mountPath: /analysis_scratch
        livenessProbe:
          httpGet:
            path: /health
            port: analyzer-api
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: analyzer-api
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources:
          
          null
      volumes:
        - name: config-volume
          configMap:
            name: foo-anchore-engine
        - name: analyzer-scratch
          
          emptyDir: {}
        - name: analyzer-config-volume
          configMap:
            name: foo-anchore-engine-analyzer
---
# Source: anchore-engine/templates/api_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: foo-anchore-engine-api
  labels:
    app: foo-anchore-engine
    component: api
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: foo-anchore-engine
      component: api
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app: foo-anchore-engine
        component: api
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: "anchore-engine-api"
        image: docker.io/anchore/anchore-engine:v0.7.2
        imagePullPolicy: IfNotPresent
        args: ["anchore-manager", "service", "start", "--no-auto-upgrade", "apiext"]
        envFrom:
        - secretRef:
            name: foo-anchore-engine
        - configMapRef:
            name: foo-anchore-engine-env
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ANCHORE_CLI_PASS
          valueFrom:
            secretKeyRef:
              name: foo-anchore-engine
              key: ANCHORE_ADMIN_PASSWORD
        ports:
        - containerPort: 8228
          name: external-api
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: external-api
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: external-api
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources:
          
          null
      volumes:
        - name: config-volume
          configMap:
            name: foo-anchore-engine
---
# Source: anchore-engine/templates/catalog_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: foo-anchore-engine-catalog
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: catalog
spec:
  selector:
    matchLabels:
      app: foo-anchore-engine
      component: catalog
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app: foo-anchore-engine
        component: catalog
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: anchore-engine-catalog
        image: docker.io/anchore/anchore-engine:v0.7.2
        imagePullPolicy: IfNotPresent
        args: ["anchore-manager", "service", "start", "--no-auto-upgrade", "catalog"]
        envFrom:
        - secretRef:
            name: foo-anchore-engine
        - configMapRef:
            name: foo-anchore-engine-env
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: catalog
          containerPort: 8082
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: catalog
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: catalog
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources:
          
          null
      volumes:
        - name: config-volume
          configMap:
            name: foo-anchore-engine
---
# Source: anchore-engine/templates/policy_engine_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: foo-anchore-engine-policy
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: policy
spec:
  selector:
    matchLabels:
      app: foo-anchore-engine
      component: policy
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app: foo-anchore-engine
        component: policy
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: anchore-engine-policy
        image: docker.io/anchore/anchore-engine:v0.7.2
        imagePullPolicy: IfNotPresent
        args: ["anchore-manager", "service", "start", "--no-auto-upgrade", "policy_engine"]
        envFrom:
        - secretRef:
            name: foo-anchore-engine
        - configMapRef:
            name: foo-anchore-engine-env
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: policy
          containerPort: 8087
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        - name: policy-scratch
          mountPath: /analysis_scratch
        livenessProbe:
          httpGet:
            path: /health
            port: policy
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: policy
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources:
          
          null
      volumes:
        - name: config-volume
          configMap:
            name: foo-anchore-engine
        - name: policy-scratch
          
          emptyDir: {}
---
# Source: anchore-engine/templates/simplequeue_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: foo-anchore-engine-simplequeue
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
    component: simplequeue
spec:
  selector:
    matchLabels:
      app: foo-anchore-engine
      component: simplequeue
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app: foo-anchore-engine
        component: simplequeue
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: "anchore-engine-simplequeue"
        image: docker.io/anchore/anchore-engine:v0.7.2
        imagePullPolicy: IfNotPresent
        args: ["anchore-manager", "service", "start", "--no-auto-upgrade", "simplequeue"]
        envFrom:
        - secretRef:
            name: foo-anchore-engine
        - configMapRef:
            name: foo-anchore-engine-env
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: simplequeue
          containerPort: 8083
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        livenessProbe:
          httpGet:
            path: /health
            port: simplequeue
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: simplequeue
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        resources:
          
          null
      volumes:
        - name: config-volume
          configMap:
            name: foo-anchore-engine
---
# Source: anchore-engine/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: foo-anchore-engine
  labels:
    app: foo-anchore-engine
    chart: anchore-engine-1.6.8
    release: foo
    heritage: Helm
  annotations:
    
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - http:
        paths:
        - path: /v1/
          backend:
            serviceName: foo-anchore-engine-api
            servicePort: 8228

NOTES:
To use Anchore Engine you need the URL, username, and password to access the API.

Anchore Engine can be accessed via port 8228 on the following DNS name from within the cluster:
foo-anchore-engine-api.default.svc.cluster.local

Here are the steps to configure the anchore-cli (`pip install anchorecli`). Use these same values for direct API access as well.

To configure your anchore-cli run:

    ANCHORE_CLI_USER=admin
    ANCHORE_CLI_PASS=$(kubectl get secret --namespace default foo-anchore-engine -o jsonpath="{.data.ANCHORE_ADMIN_PASSWORD}" | base64 --decode; echo)

   ANCHORE_CLI_URL=http://$(kubectl get ingress --namespace default foo-anchore-engine -o jsonpath="{.status.loadBalancer.ingress[0].ip}")/v1/


To verify the service is up and running, you can run container for the Anchore Engine CLI:

    kubectl run -i --tty anchore-cli --restart=Always --image anchore/engine-cli  --env ANCHORE_CLI_USER=admin --env ANCHORE_CLI_PASS=${ANCHORE_CLI_PASS} --env ANCHORE_CLI_URL=http://foo-anchore-engine-api.default.svc.cluster.local:8228/v1/

from within the container you can use 'anchore-cli' commands.

* NOTE: On first startup of anchore-engine, it performs a CVE data sync which may take several minutes to complete. During this time the system status will report 'partially_down' and any images added for analysis will stay in the 'not_analyzed' state.
Once the sync is complete, any queued images will be analyzed and the system status will change to 'all_up'.

Initial setup time can be >120sec for postgresql setup and readiness checks to pass for the services as indicated by pod state. You can check with:
    kubectl get pods -l app=foo-anchore-engine,component=api


A quick primer on using the Anchore Engine CLI follows. For more info see: https://github.com/anchore/anchore-engine/wiki/Getting-Started

View system status:

    anchore-cli system status

Add an image to be analyzed:

    anchore-cli image add <imageref>

List images and see the analysis status (not_analyzed initially):

    anchore-cli image list

Once the image is analyzed you'll see status change to 'analyzed'. This may take some time on first execution with a new database because
the system must first do a CVE data sync which can take several minutes. Once complete, the image will transition to 'analyzing' state.

When the image reaches 'analyzed' state, you can view policy evaluation output with:

    anchore-cli evaluate check <imageref>

List CVEs found in the image with:

    anchore-cli image vuln <imageref> os

List OS packages found in the image with:
    anchore-cli image content <imageref> os

List files found in the image with:
    anchore-cli image content <imageref> files
