{{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseFeeds.enabled -}}
{{- $component := "enterprise-feeds" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "anchore-engine.enterprise-feeds.fullname" . }}
  labels:
    app: {{ template "anchore-engine.fullname" . }}
    component: {{ $component }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- with .Values.anchoreEnterpriseFeeds.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
    {{- with .Values.anchoreGlobal.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
  {{- if or .Values.anchoreGlobal.deploymentAnnotations .Values.anchoreEnterpriseFeeds.deploymentAnnotations }}
  annotations:
  {{- with .Values.anchoreGlobal.deploymentAnnotations }}
    {{ toYaml . | indent 4 }}
  {{- end }}
  {{- with .Values.anchoreEnterpriseFeeds.deploymentAnnotations }}
    {{ toYaml . | indent 4 }}
  {{- end }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "anchore-engine.fullname" . }}
      component: {{ $component }}
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app: {{ template "anchore-engine.fullname" . }}
        component: {{ $component }}
        {{- with .Values.anchoreEnterpriseFeeds.labels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.anchoreGlobal.labels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
      annotations:
      {{- with .Values.anchoreGlobal.annotations }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseFeeds.annotations }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if not (or .Values.inject_secrets_via_env .Values.anchoreGlobal.useExistingSecrets) }}
        checksum/secrets: {{ include (print $.Template.BasePath "/enterprise_feeds_secret.yaml") . | sha256sum }}
      {{- end }}
        checksum/feeds-config: {{ include (print $.Template.BasePath "/enterprise_feeds_configmap.yaml") . | sha256sum }}
    spec:
      {{- with .Values.anchoreGlobal.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: {{ .Values.anchoreEnterpriseGlobal.imagePullSecretName }}
    {{- if and (or .Values.anchoreGlobal.scratchVolume.fixGroupPermissions .Values.anchoreEnterpriseFeeds.persistence.fixGroupPermissions) .Values.anchoreGlobal.securityContext.fsGroup }}
      initContainers:
        - name: mode-fixer
          image: alpine
          securityContext:
            runAsUser: 0
          volumeMounts:
          {{- if .Values.anchoreGlobal.scratchVolume.fixGroupPermissions }}
            - name: {{ $component }}-scratch
              mountPath: {{ .Values.anchoreGlobal.scratchVolume.mountPath }}
          {{- end }}
          {{- if .Values.anchoreEnterpriseFeeds.persistence.fixGroupPermissions }}
            - name: data
              mountPath: {{ .Values.anchoreEnterpriseFeeds.persistence.mountPath }}
              subPath: {{ .Values.anchoreEnterpriseFeeds.persistence.subPath }}
          {{- end }}
          command: ["/bin/sh", "-c"]
          args:
          {{- if .Values.anchoreGlobal.scratchVolume.fixGroupPermissions }}
            - (chmod 0775 {{ .Values.anchoreGlobal.scratchVolume.mountPath }}; chgrp {{ .Values.anchoreGlobal.securityContext.fsGroup }} {{ .Values.anchoreGlobal.scratchVolume.mountPath }} )
          {{- end }}
          {{- if .Values.anchoreEnterpriseFeeds.persistence.fixGroupPermissions }}
            - (chmod 0775 {{ .Values.anchoreEnterpriseFeeds.persistence.mountPath }}; chgrp {{ .Values.anchoreGlobal.securityContext.fsGroup }} {{ .Values.anchoreEnterpriseFeeds.persistence.mountPath }} )
          {{- end }}
      {{- end }}
      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        {{- with .Values.anchoreGlobal.containerSecurityContext }}
        securityContext:
          {{ toYaml . | nindent 10 }}
        {{- end }}
        command: ["/cloud_sql_proxy"]
        args:
        {{- if .Values.cloudsql.extraArgs }}
        {{- range $arg := .Values.cloudsql.extraArgs }}
        - {{ quote $arg }}
        {{- end }}
        {{- end }}
        - "-instances={{ .Values.cloudsql.instance }}=tcp:5432"
        {{- if .Values.cloudsql.useExistingServiceAcc }}
        - "-credential_file=/var/{{ .Values.cloudsql.serviceAccSecretName }}/{{ .Values.cloudsql.serviceAccJsonName }}"
        volumeMounts:
        - mountPath: /var/{{ .Values.cloudsql.serviceAccSecretName }}
          name: {{ .Values.cloudsql.serviceAccSecretName }}
          readOnly: true
        {{- end }}
      {{- end }}
      - name: "{{ .Chart.Name }}-{{ $component }}"
        image: {{ .Values.anchoreEnterpriseGlobal.image }}
        imagePullPolicy: {{ .Values.anchoreEnterpriseGlobal.imagePullPolicy }}
        {{- with .Values.anchoreGlobal.containerSecurityContext }}
        securityContext:
          {{ toYaml . | nindent 10 }}
        {{- end }}
        command: ["/bin/sh", "-c"]
        args:
        - {{ print (include "doSourceFile" .) }} /docker-entrypoint.sh anchore-enterprise-manager service start --no-auto-upgrade feeds
        ports:
        - containerPort: {{ .Values.anchoreEnterpriseFeeds.service.port }}
          name: feeds-api
        envFrom:
        {{- if not .Values.inject_secrets_via_env }}
        {{- if .Values.anchoreGlobal.useExistingSecrets }}
        - secretRef:
            name: {{ .Values.anchoreEnterpriseFeeds.existingSecretName }}
        {{- else }}
        - secretRef:
            name: {{ include "anchore-engine.enterprise-feeds.fullname" . }}
        - secretRef:
            name: {{ print (include "anchore-engine.fullname" .) "-admin-pass" }}
        {{- end }}
        {{- end }}
        env:
        {{- with .Values.anchoreGlobal.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.anchoreEnterpriseFeeds.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: data
          mountPath: {{ .Values.anchoreEnterpriseFeeds.persistence.mountPath }}
          subPath: {{ .Values.anchoreEnterpriseFeeds.persistence.subPath }}
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        {{- if .Values.anchoreGlobal.openShiftDeployment }}
        - name: service-config-volume
          mountPath: /anchore_service_config
        - name: logs
          mountPath: /var/log/anchore
        - name: run
          mountPath: /var/run/anchore
        {{- end }}
        - name: {{ $component }}-scratch
          mountPath: {{ .Values.anchoreGlobal.scratchVolume.mountPath }}
        - name: anchore-license
          mountPath: /home/anchore/license.yaml
          subPath: license.yaml
        {{- if (.Values.anchoreGlobal.certStoreSecretName) }}
        - name: certs
          mountPath: /home/anchore/certs/
          readOnly: true
        {{- end }}
        {{- with .Values.anchoreGlobal.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: feeds-api
            {{- if .Values.anchoreGlobal.internalServicesSsl.enabled }}
            scheme: HTTPS
            {{- end }}
          initialDelaySeconds: {{ .Values.anchoreGlobal.probes.liveness.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.anchoreGlobal.probes.liveness.timeoutSeconds }}
          periodSeconds: {{ .Values.anchoreGlobal.probes.liveness.periodSeconds }}
          failureThreshold: {{ .Values.anchoreGlobal.probes.liveness.failureThreshold }}
          successThreshold: {{ .Values.anchoreGlobal.probes.liveness.successThreshold }}
        readinessProbe:
          httpGet:
            path: /health
            port: feeds-api
            {{- if .Values.anchoreGlobal.internalServicesSsl.enabled }}
            scheme: HTTPS
            {{- end }}
          timeoutSeconds: {{ .Values.anchoreGlobal.probes.readiness.timeoutSeconds }}
          periodSeconds: {{ .Values.anchoreGlobal.probes.readiness.periodSeconds }}
          failureThreshold: {{ .Values.anchoreGlobal.probes.readiness.failureThreshold }}
          successThreshold: {{ .Values.anchoreGlobal.probes.readiness.successThreshold }}
        resources:
          {{ toYaml .Values.anchoreEnterpriseFeeds.resources | nindent 10 }}
      volumes:
        - name: data
        {{- if .Values.anchoreEnterpriseFeeds.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.anchoreEnterpriseFeeds.persistence.existingClaim | default (include "anchore-engine.enterprise-feeds.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: config-volume
          configMap:
            name: {{ template "anchore-engine.enterprise-feeds.fullname" . }}
        - name: {{ $component}}-scratch
        {{- if .Values.anchoreGlobal.scratchVolume.details }}
          {{- toYaml .Values.anchoreGlobal.scratchVolume.details | nindent 10 }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.anchoreGlobal.openShiftDeployment }}
        - name: service-config-volume
          emptyDir: {}
        - name: logs
          emptyDir: {}
        - name: run
          emptyDir: {}
        {{- end }}
        - name: anchore-license
          secret:
            secretName: {{ .Values.anchoreEnterpriseGlobal.licenseSecretName }}
        {{- if .Values.cloudsql.useExistingServiceAcc }}
        - name: {{ .Values.cloudsql.serviceAccSecretName }}
          secret:
            secretName: {{ .Values.cloudsql.serviceAccSecretName }}
        {{- end }}
        {{- with .Values.anchoreGlobal.certStoreSecretName }}
        - name: certs
          secret:
            secretName: {{ . }}
        {{- end }}
        {{- with .Values.anchoreGlobal.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.anchoreEnterpriseFeeds.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseFeeds.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseFeeds.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with include "anchore-engine.enterprise-feeds.serviceAccountName" . }}
      serviceAccountName: {{ . }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "anchore-engine.enterprise-feeds.serviceName" . }}
  labels:
    app: {{ template "anchore-engine.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ $component }}
    {{- with .Values.anchoreEnterpriseFeeds.service.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
    {{- with .Values.anchoreGlobal.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.anchoreEnterpriseFeeds.service.annotations }}
  annotations:
    {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.anchoreEnterpriseFeeds.service.type }}
  ports:
    - name: feeds-api
      port: {{ .Values.anchoreEnterpriseFeeds.service.port }}
      targetPort: {{ .Values.anchoreEnterpriseFeeds.service.port }}
      protocol: TCP
      {{- with .Values.anchoreEnterpriseFeeds.service.nodePort }}
      nodePort: {{ . }}
      {{- end }}
  selector:
    app: {{ template "anchore-engine.fullname" . }}
    component: {{ $component }}

{{- end -}}
