{{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseEngineUpgradeJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-enterprise-upgrade"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "-3"
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-enterprise-upgrade"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
      annotations:
      {{- with .Values.anchoreGlobal.annotations }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.annotations }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.anchoreGlobal.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: {{ .Values.anchoreEnterpriseGlobal.imagePullSecretName }}
      restartPolicy: Never
      {{- if .Values.cloudsql.enabled }}
      shareProcessNamespace: true
      {{- end }}
      containers:
      {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: {{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        command: ["/cloud_sql_proxy"]
        args:
        - "-instances={{ .Values.cloudsql.instance }}=tcp:5432"
        {{- if .Values.cloudsql.useExistingServiceAcc }}
        - "-credential_file=/var/{{ .Values.cloudsql.serviceAccSecretName }}/{{ .Values.cloudsql.serviceAccJsonName }}"
        volumeMounts:
        - mountPath: /var/{{ .Values.cloudsql.serviceAccSecretName }}
          name: {{ .Values.cloudsql.serviceAccSecretName }}
          readOnly: true
        {{- end }}
      {{- end }}
      - name: "{{ .Release.Name }}-enterprise-upgrade"
        imagePullPolicy: {{ .Values.anchoreEnterpriseGlobal.imagePullPolicy }}
        image: {{ .Values.anchoreEnterpriseGlobal.image }}
        command: ["/bin/bash", "-c"]
        args:
        {{- if not .Values.anchoreGlobal.dbConfig.ssl }}
          - |
            anchore-enterprise-manager db --db-connect postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME} upgrade --dontask;
        {{- else if eq .Values.anchoreGlobal.dbConfig.sslMode "require" }}
          - |
            anchore-enterprise-manager db --db-use-ssl --db-connect postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}?sslmode={{- .Values.anchoreGlobal.dbConfig.sslMode -}} upgrade --dontask
        {{- else }}
          - |
            anchore-enterprise-manager db --db-use-ssl --db-connect postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}?sslmode={{- .Values.anchoreGlobal.dbConfig.sslMode -}}\\&sslrootcert=/home/anchore/certs/{{- .Values.anchoreGlobal.dbConfig.sslRootCertName -}} upgrade --dontask;
        {{- end }}

        {{- if .Values.cloudsql.enabled }}
            sql_proxy_pid=$(pgrep cloud_sql_proxy) && kill -INT $sql_proxy_pid;
        securityContext:
          capabilities:
            add:
              - SYS_PTRACE
        {{- end }}
        envFrom:
        {{- if not .Values.inject_secrets_via_env }}
        {{- if .Values.anchoreGlobal.existingSecret }}
        - secretRef:
            name: {{ .Values.anchoreGlobal.existingSecret }}
        {{- else }}
        - secretRef:
            name: {{ include "anchore-engine.fullname" . }}
        - secretRef:
            name: {{ print (include "anchore-engine.fullname" .) "-admin-pass" }}
        {{- end }}
        {{- end }}
        - configMapRef:
            name: {{ template "anchore-engine.fullname" . }}-env
        env:
        {{- with .Values.anchoreGlobal.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if (.Values.anchoreGlobal.certStoreSecretName) }}
        volumeMounts:
        - name: certs
          mountPath: /home/anchore/certs/
          readOnly: true
        {{- end }}
    {{- if or .Values.anchoreGlobal.certStoreSecretName .Values.cloudsql.useExistingServiceAcc }}
      volumes:
      {{- with .Values.anchoreGlobal.certStoreSecretName }}
      - name: certs
        secret:
          secretName: {{ . }}
      {{- end }}
      {{- if .Values.cloudsql.useExistingServiceAcc }}
      - name: {{ .Values.cloudsql.serviceAccSecretName }}
        secret:
          secretName: {{ .Values.cloudsql.serviceAccSecretName }}
      {{- end }}
    {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreGlobal.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end }}
{{- end }}
