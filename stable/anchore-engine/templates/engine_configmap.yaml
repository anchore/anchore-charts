{{- $anchoreFeedsURL := "https://ancho.re/v1/service/feeds" -}}
{{- $grypeProviderFeedsExternalURL := "" -}}

{{- if .Values.anchoreEnterpriseFeeds.url -}}
  {{- $urlPathSuffix := (default "" (regexFind "/v1.*$" .Values.anchoreEnterpriseFeeds.url)) -}}
  {{- $anchoreFeedsHost := (trimSuffix $urlPathSuffix .Values.anchoreEnterpriseFeeds.url) -}}
  {{- $anchoreFeedsURL = (printf "%s/v1/feeds" $anchoreFeedsHost) -}}
  {{- $grypeProviderFeedsExternalURL = (printf "%s/v1/databases/grypedb" $anchoreFeedsHost) -}}
{{- else if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseFeeds.enabled -}}
  {{- if .Values.anchoreGlobal.internalServicesSsl.enabled -}}
    {{- $anchoreFeedsURL = (printf "https://%s:%s/v1/feeds"  (include "anchore-engine.enterprise-feeds.serviceName" .) (.Values.anchoreEnterpriseFeeds.service.port | toString) ) -}}
    {{- $grypeProviderFeedsExternalURL = (printf "https://%s:%s/v1/databases/grypedb"  (include "anchore-engine.enterprise-feeds.serviceName" .) (.Values.anchoreEnterpriseFeeds.service.port | toString) ) -}}
  {{- else -}}
    {{- $anchoreFeedsURL = (printf "http://%s:%s/v1/feeds" (include "anchore-engine.enterprise-feeds.serviceName" .) (.Values.anchoreEnterpriseFeeds.service.port | toString) ) -}}
    {{- $grypeProviderFeedsExternalURL = (printf "http://%s:%s/v1/databases/grypedb"  (include "anchore-engine.enterprise-feeds.serviceName" .) (.Values.anchoreEnterpriseFeeds.service.port | toString) ) -}}
  {{- end -}}
{{- end -}}

{{- /* Set the grypeProviderFeedsExternalURL to upstream feeds if still unset or if specifically overridden */}}
{{- if or (empty $grypeProviderFeedsExternalURL) .Values.anchorePolicyEngine.overrideFeedsToUpstream -}}
  {{- $grypeProviderFeedsExternalURL = "https://toolbox-data.anchore.io/grype/databases/listing.json" -}}
{{- end -}}

kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "anchore-engine.fullname" . }}
  labels:
    app: {{ template "anchore-engine.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- with .Values.anchoreGlobal.labels }}
    {{ toYaml . | nindent 4 }}
    {{- end }}
data:
  config.yaml: |
    # Anchore Service Configuration File from ConfigMap
    service_dir: {{ .Values.anchoreGlobal.serviceDir }}
    tmp_dir: {{ .Values.anchoreGlobal.scratchVolume.mountPath }}
    log_level: {{ .Values.anchoreGlobal.logLevel }}
    image_analyze_timeout_seconds: {{ .Values.anchoreGlobal.imageAnalyzeTimeoutSeconds }}
    allow_awsecr_iam_auto: {{ .Values.anchoreGlobal.allowECRUseIAMRole }}
    host_id: "${ANCHORE_POD_NAME}"
    internal_ssl_verify: {{ .Values.anchoreGlobal.internalServicesSsl.verifyCerts }}
    auto_restart_services: false

    {{- if .Values.anchoreEnterpriseGlobal.enabled }}
    license_file: /home/anchore/license.yaml
    {{- end }}

    global_client_connect_timeout: {{ default 0 .Values.anchoreGlobal.clientConnectTimeout }}
    global_client_read_timeout: {{ default 0 .Values.anchoreGlobal.clientReadTimeout }}
    server_request_timeout_seconds: {{ .Values.anchoreGlobal.serverRequestTimeout }}

    metrics:
      enabled: {{ .Values.anchoreGlobal.enableMetrics }}
      auth_disabled: {{ .Values.anchoreGlobal.metricsAuthDisabled }}
    {{ if .Values.anchoreGlobal.webhooksEnabled }}
    webhooks:
      {{- toYaml .Values.anchoreGlobal.webhooks | nindent 6 }}
    {{ end }}

    default_admin_password: ${ANCHORE_ADMIN_PASSWORD}
    default_admin_email: {{ .Values.anchoreGlobal.defaultAdminEmail }}

    # Defines a maximum compressed image size (MB) to be added for analysis
    # Value < 0 disables feature. Disabled by default
    max_compressed_image_size_mb: {{ default -1 .Values.anchoreGlobal.maxCompressedImageSizeMB }}

    # Locations for keys used for signing and encryption. Only one of 'secret' or 'public_key_path'/'private_key_path' needs to be set. If all are set then the keys take precedence over the secret value
    # Secret is for a shared secret and if set, all components in anchore should have the exact same value in their configs.
    keys:
      {{- if or .Values.anchoreGlobal.saml.secret .Values.anchoreGlobal.saml.useExistingSecret }}
      secret: ${ANCHORE_SAML_SECRET}
      {{- end }}
      {{- with .Values.anchoreGlobal.saml.publicKeyName }}
      public_key_path: /home/anchore/certs/{{- . }}
      {{- end }}
      {{- with .Values.anchoreGlobal.saml.privateKeyName }}
      private_key_path: /home/anchore/certs/{{- . }}
      {{- end }}

    # Configuring supported user authentication and credential management
    user_authentication:
      oauth:
        enabled: {{ .Values.anchoreGlobal.oauthEnabled }}
        default_token_expiration_seconds: {{ .Values.anchoreGlobal.oauthTokenExpirationSeconds }}

      # Set this to True to enable storing user passwords only as secure hashes in the db. This can dramatically increase CPU usage if you
      # don't also use oauth and tokens for internal communications (which requires keys/secret to be configured as well)
      # WARNING: you should not change this after a system has been initialized as it may cause a mismatch in existing passwords
      hashed_passwords: {{ .Values.anchoreGlobal.hashedPasswords }}

      # Set this to True in order to disable the SSO JIT provisioning during authentication. This provides an additional
      # layer of security and configuration for SSO users to gain access to Anchore.  This is disabled by default.
      sso_require_existing_users: {{ .Values.anchoreGlobal.ssoRequireExistingUsers }}

    credentials:
      database:
        {{- if not .Values.anchoreGlobal.dbConfig.ssl }}
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}"
        {{- else if eq .Values.anchoreGlobal.dbConfig.sslMode "require" }}
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}?sslmode={{- .Values.anchoreGlobal.dbConfig.sslMode -}}"
        {{- else }}
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}?sslmode={{- .Values.anchoreGlobal.dbConfig.sslMode -}}&sslrootcert=/home/anchore/certs/{{- .Values.anchoreGlobal.dbConfig.sslRootCertName -}}"
        {{- end }}
        db_connect_args:
          timeout: {{ .Values.anchoreGlobal.dbConfig.timeout }}
          ssl: false
        db_pool_size: {{ .Values.anchoreGlobal.dbConfig.connectionPoolSize }}
        db_pool_max_overflow: {{ .Values.anchoreGlobal.dbConfig.connectionPoolMaxOverflow }}
        {{- with .Values.anchoreGlobal.dbConfig.engineArgs }}
        db_engine_args:
          {{- toYaml . | nindent 10 }}
        {{- end }}
    services:
      apiext:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "anchore-engine.api.serviceName" . }}
        max_request_threads: {{ default 50 .Values.anchoreApi.maxRequestThreads }}
        listen: 0.0.0.0
        port: {{ .Values.anchoreApi.service.port }}
        {{- if .Values.anchoreApi.external }}
        {{- if .Values.anchoreApi.external.use_tls }}
        external_tls: {{ .Values.anchoreApi.external.use_tls }}
        {{- end }}
        {{- if .Values.anchoreApi.external.hostname }}
        external_hostname: {{ .Values.anchoreApi.external.hostname }}
        {{- end }}
        external_port: {{ .Values.anchoreApi.external.port | default "null" }}
        {{- end }}
        {{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseRbac.enabled }}
        authorization_handler: external
        authorization_handler_config:
          endpoint: "http://localhost:{{- .Values.anchoreEnterpriseRbac.service.authPort }}"
        {{- end }}
        {{- if .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      analyzer:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "anchore-engine.analyzer.fullname" . }}
        listen: 0.0.0.0
        port: {{ .Values.anchoreAnalyzer.containerPort }}
        max_request_threads: {{ default 50 .Values.anchoreAnalyzer.maxRequestThreads }}
        cycle_timer_seconds: 1
        cycle_timers:
          {{- toYaml .Values.anchoreAnalyzer.cycleTimers | nindent 10 }}
        max_threads: {{ .Values.anchoreAnalyzer.concurrentTasksPerWorker }}
        analyzer_driver: 'nodocker'
        {{- if gt .Values.anchoreAnalyzer.layerCacheMaxGigabytes 0.0 }}
        layer_cache_enable: true
        {{- else }}
        layer_cache_enable: false
        {{- end }}
        layer_cache_max_gigabytes: {{ .Values.anchoreAnalyzer.layerCacheMaxGigabytes }}
        enable_hints: {{ .Values.anchoreAnalyzer.enableHints }}
        {{- if .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
        enable_owned_package_filtering: {{ .Values.anchoreAnalyzer.enableOwnedPackageFiltering }}
      catalog:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "anchore-engine.catalog.serviceName" . }}
        listen: 0.0.0.0
        port: {{ .Values.anchoreCatalog.service.port }}
        max_request_threads: {{ default 50 .Values.anchoreCatalog.maxRequestThreads }}
        cycle_timer_seconds: 1
        cycle_timers:
          # Interval to check for an update to a tag
          image_watcher: {{ .Values.anchoreCatalog.cycleTimers.image_watcher }}
          # Interval to run a policy evaluation on images with the policy_eval subscription activated.
          policy_eval: {{ .Values.anchoreCatalog.cycleTimers.policy_eval }}
          # Interval to run a vulnerability scan on images with the vuln_update subscription activated.
          vulnerability_scan: {{ .Values.anchoreCatalog.cycleTimers.vulnerability_scan }}
          # Interval at which the catalog looks for new work to put on the image analysis queue.
          analyzer_queue: {{ .Values.anchoreCatalog.cycleTimers.analyzer_queue }}
          # Interval at which the catalog archival tasks are triggered.
          archive_tasks: {{ .Values.anchoreCatalog.cycleTimers.archive_tasks }}
          image_gc: {{ .Values.anchoreCatalog.cycleTimers.image_gc }}
          # Interval notifications will be processed for state changes
          {{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseNotifications.enabled }}
          notifications: 0
          {{- else }}
          notifications: {{ .Values.anchoreCatalog.cycleTimers.notifications }}
          {{- end }}
          # Intervals service state updates are polled for the system status
          service_watcher: {{ .Values.anchoreCatalog.cycleTimers.service_watcher }}
          # Interval between checks to repo for new tags
          repo_watcher: {{ .Values.anchoreCatalog.cycleTimers.repo_watcher }}
          k8s_image_watcher: {{ .Values.anchoreCatalog.cycleTimers.k8s_image_watcher }}
          resource_metrics: {{ .Values.anchoreCatalog.cycleTimers.resource_metrics }}
          events_gc: {{ .Values.anchoreCatalog.cycleTimers.events_gc }}
        image_gc:
          max_worker_threads: {{ default 4 .Values.anchoreCatalog.imageGCMaxWorkerThreads }}
        event_log:
          {{- toYaml .Values.anchoreCatalog.events | nindent 10 }}
        analysis_archive:
          {{- toYaml .Values.anchoreCatalog.analysis_archive | nindent 10 }}
        object_store:
          {{- toYaml .Values.anchoreCatalog.object_store | nindent 10 }}
        {{- if .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
        {{- if .Values.anchoreEnterpriseGlobal.enabled }}
        runtime_compliance:
          object_store_bucket: "runtime_compliance_check"
        {{- end }}
        runtime_inventory:
          image_ttl_days: {{ .Values.anchoreCatalog.runtimeInventory.imageTTLDays }}
      simplequeue:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "anchore-engine.simplequeue.serviceName" . }}
        listen: 0.0.0.0
        port: {{ .Values.anchoreSimpleQueue.service.port }}
        max_request_threads: {{ default 50 .Values.anchoreSimpleQueue.maxRequestThreads }}
        {{- if .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      policy_engine:
        enabled: true
        require_auth: true
        max_request_threads: {{ default 50 .Values.anchorePolicyEngine.maxRequestThreads }}
        endpoint_hostname: {{ template "anchore-engine.policy-engine.serviceName" . }}
        listen: 0.0.0.0
        port: {{ .Values.anchorePolicyEngine.service.port }}
        policy_evaluation_cache_ttl: {{ .Values.anchorePolicyEngine.cacheTTL }}
        cycle_timer_seconds: 1
        cycle_timers:
          {{- toYaml .Values.anchorePolicyEngine.cycleTimers | nindent 10 }}
        vulnerabilities:
          provider: grype
          sync:
            enabled: true
            ssl_verify: {{ .Values.anchoreGlobal.internalServicesSsl.verifyCerts }}
            connection_timeout_seconds: {{ default 3 .Values.anchoreGlobal.feedsConnectionTimeout }}
            read_timeout_seconds: {{ default 180 .Values.anchoreGlobal.feedsReadTimeout }}
            data:
              # grypedb feed is synced if the provider is set to grype. All the remaining feeds except for packages are ignored even if they are enabled
              grypedb:
                enabled: {{ default "true" (.Values.anchoreGlobal.syncGrypeDB | quote) }}
                url: {{ $grypeProviderFeedsExternalURL }}
              # The following feeds are synced if provider is set to legacy
              # Vulnerabilities feed is the feed for distro cve sources (redhat, debian, ubuntu, oracle, alpine....)
              vulnerabilities:
                enabled: {{ default "true" (.Values.anchoreGlobal.syncVulnerabilites | quote) }}
                url: {{ $anchoreFeedsURL }}
              # NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and released by distros as rpms, debs, etc
              nvdv2:
                enabled: {{ default "true" (.Values.anchoreGlobal.syncNvd | quote) }}
                url: {{ $anchoreFeedsURL }}
              github:
                {{- if .Values.anchoreEnterpriseGlobal.enabled }}
                enabled: {{ .Values.anchoreEnterpriseFeeds.githubDriverEnabled }}
                {{- else }}
                enabled: {{ default "true" (.Values.anchoreGlobal.syncGithub | quote) }}
                {{- end }}
                url: {{ $anchoreFeedsURL }}
              # Warning: enabling the packages and nvd sync causes the service to require much more memory to do process the significant data volume. We recommend at least 4GB available for the container
              # packages feed is synced if it is enabled regardless of the provider
              packages:
                {{- if and (and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseFeeds.enabled) (or .Values.anchoreEnterpriseFeeds.gemDriverEnabled .Values.anchoreEnterpriseFeeds.npmDriverEnabled) }}
                enabled: true
                {{- else }}
                enabled: {{ default "false" (.Values.anchoreGlobal.syncPackages | quote) }}
                {{- end }}
                url: {{ $anchoreFeedsURL }}
              {{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseFeeds.enabled }}
              microsoft:
                enabled: {{ .Values.anchoreEnterpriseFeeds.msrcDriverEnabled }}
                url: {{ $anchoreFeedsURL }}
              {{- else if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreGlobal.syncMSRC }}
              microsoft:
                enabled: true
                url: {{ $anchoreFeedsURL }}
              {{- end }}
        {{- if .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.anchoreGlobal.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.anchoreGlobal.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
