{{- if .Values.postgresql.createExternalDbAssets }}
{{- if hasKey .Values.postgresql "enabled" }}
{{- if (not .Values.postgresql.enabled) }}
# Job to sync db and db user with external postgres for Anchore's primary data store
apiVersion: batch/v1
kind: Job
metadata:
  name: ensure-anchore-db
  annotations:
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: ensure-anchore-db
      annotations:
        sidecar.istio.io/inject: 'false'
    spec:
      {{- if .Values.postgresql.imagePullSecretName }}
      imagePullSecrets:
        - name: {{ .Values.postgresql.imagePullSecretName }}
      {{- end }}
      containers:
        - name: psql
          image: {{ .Values.postgresql.image }}
          command:
            - /bin/bash
            - -exc
            - |   
              echo "Ensure Anchore DB..."
              
              psql -tc "SELECT 1 FROM pg_database WHERE datname = '$ANCHORE_DB'" | grep -q 1 || psql -c "CREATE DATABASE $ANCHORE_DB"
              psql -tc "SELECT 1 FROM pg_roles WHERE rolname = '$APPLICATION_USER'" | grep -q 1 && psql -c "ALTER USER $APPLICATION_USER WITH PASSWORD '$APPLICATION_PASSWORD'; GRANT ALL PRIVILEGES ON DATABASE $ANCHORE_DB TO $APPLICATION_USER;" | grep -q GRANT || psql -c "CREATE USER $APPLICATION_USER WITH PASSWORD '$APPLICATION_PASSWORD'; GRANT ALL PRIVILEGES ON DATABASE $ANCHORE_DB TO $APPLICATION_USER;"
          envFrom:
            - secretRef:
                name: anchore-db-credentials
      restartPolicy: OnFailure
{{- end }}
{{- end }}
{{- end }}