apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "feeds.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "feeds.common.labels" . | nindent 4 }}
  annotations: {{- include "feeds.common.annotations" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "feeds.common.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "feeds.common.labels" . | nindent 8 }}
      annotations: {{- include "feeds.common.annotations" (merge (dict "nil" true) .) | nindent 8 }}
      {{- if not .Values.injectSecretsViaEnv }}
        checksum/secrets: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- end }}
        checksum/feeds-config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
    {{- with .Values.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end }}
    {{- with .Values.imagePullSecretName }}
      imagePullSecrets:
        - name: {{ . }}
    {{- end }}
    {{- if and (or .Values.scratchVolume.fixGroupPermissions .Values.persistence.fixGroupPermissions) .Values.securityContext.fsGroup }}
      initContainers:
        - name: mode-fixer
          image: {{ .Values.scratchVolume.fixerInitContainerImage }}
          securityContext:
            runAsUser: 0
          volumeMounts:
          {{- if .Values.scratchVolume.fixGroupPermissions }}
            - name: "anchore-scratch"
              mountPath: {{ .Values.scratchVolume.mountPath }}
          {{- end }}
          {{- if .Values.persistence.fixGroupPermissions }}
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              subPath: {{ .Values.persistence.subPath }}
          {{- end }}
          command: ["/bin/sh", "-c"]
          args:
          {{- if .Values.scratchVolume.fixGroupPermissions }}
            - (chmod 0775 {{ .Values.scratchVolume.mountPath }}; chgrp {{ .Values.securityContext.fsGroup }} {{ .Values.scratchVolume.mountPath }} )
          {{- end }}
          {{- if .Values.persistence.fixGroupPermissions }}
            - (chmod 0775 {{ .Values.persistence.mountPath }}; chgrp {{ .Values.securityContext.fsGroup }} {{ .Values.persistence.mountPath }} )
          {{- end }}
    {{- end }}
      containers:
      {{- if .Values.cloudsql.enabled  }}
        {{- include "feeds.common.cloudsqlContainer" . | nindent 8 }}
      {{- end }}
        - name: "{{ .Chart.Name }}-feeds"
          image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
        {{- with .Values.containerSecurityContext }}
          securityContext:
            {{ toYaml . | nindent 12 }}
        {{- end }}
          command: ["/bin/sh", "-c"]
          args:
            - {{ print (include "feeds.doSourceFile" .) }} /docker-entrypoint.sh anchore-enterprise-manager service start --no-auto-upgrade feeds
          ports:
            - containerPort: {{ .Values.service.port }}
              name: feeds-api
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-feeds-config-env-vars
          {{- if not .Values.standalone }}
            - configMapRef:
                name: {{ .Release.Name }}-enterprise-config-env-vars
          {{- end }}
        {{- if not .Values.injectSecretsViaEnv }}
          {{- if .Values.useExistingSecrets }}
            - secretRef:
                name: {{ .Values.existingSecretName }}
          {{- else }}
            - secretRef:
                name: {{ template "feeds.fullname" . }}
          {{- end }}
        {{- end }}
          env: {{- include "feeds.common.environment" . | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
              subPath: {{ .Values.persistence.subPath }}
            - name: config-volume
              mountPath: /config/config.yaml
              subPath: config.yaml
            - name: "anchore-scratch"
              mountPath: {{ .Values.scratchVolume.mountPath }}
            - name: anchore-license
              mountPath: /home/anchore/license.yaml
              subPath: license.yaml
            - name: anchore-scripts
              mountPath: /scripts
          {{- if .Values.certStoreSecretName }}
            - name: certs
              mountPath: /home/anchore/certs/
              readOnly: true
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: feeds-api
              scheme: {{ include "feeds.setProtocol" . | upper }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: feeds-api
              scheme: {{ include "feeds.setProtocol" . | upper }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "feeds.fullname" .) .Values.persistence.existingClaim }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: config-volume
          configMap:
            name: {{ template "feeds.fullname" . }}
        - name: anchore-scripts
          configMap:
            name: {{ printf "%s-%s-scripts" .Release.Name (ternary "feeds" "enterprise" .Values.standalone) }}
            defaultMode: 0755
        - name: "anchore-scratch"
        {{- if .Values.scratchVolume.details }}
          {{- toYaml .Values.scratchVolume.details | nindent 10 }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        - name: anchore-license
          secret:
            secretName: {{ .Values.licenseSecretName }}
      {{- if .Values.cloudsql.useExistingServiceAcc }}
        - name: {{ .Values.cloudsql.serviceAccSecretName }}
          secret:
            secretName: {{ .Values.cloudsql.serviceAccSecretName }}
      {{- end }}
      {{- with .Values.certStoreSecretName }}
        - name: certs
          secret:
            secretName: {{ . }}
      {{- end }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
    {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "feeds.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "feeds.common.labels" . | nindent 4 }}
  annotations: {{- include "feeds.common.annotations" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  selector: {{- include "feeds.common.matchLabels" . | nindent 4 }}
  ports:
    - name: feeds-api
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
      protocol: TCP
      {{- with .Values.service.nodePort }}
      nodePort: {{ . }}
      {{- end }}
